name: format-pull-request
on:
  pull_request:
    branches: [main]
jobs:
  format-pull-request:
    runs-on: ubuntu-latest
    steps:
      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.FORMAT_PULL_REQUEST_APP_ID }}
          private-key: ${{ secrets.FORMAT_PULL_REQUEST_PRIVATE_KEY }}
      - name: Format pull request
        shell: python
        run: |
          import json
          import sys
          from typing import List

          import requests


          def get_request(url: str) -> dict:
              return requests.get(
                  url,
                  headers={
                      "Accept": "application/vnd.github+json",
                      "Authorization": "Bearer ${{ steps.generate-token.outputs.token }}",
                      "X-GitHub-Api-Version": "2022-11-28",
                  },
              ).json()


          def patch_request(url: str, data: str) -> None:
              requests.patch(
                  url,
                  headers={
                      "Accept": "application/vnd.github+json",
                      "Authorization": "Bearer ${{ secrets.GITHUB_TOKEN }}",
                      "X-GitHub-Api-Version": "2022-11-28",
                  },
                  data=data,
              ).json()


          def get_usernames() -> List[str]:
              members = get_request("https://api.github.com/orgs/${{ github.repository_owner }}/members")
              return [member["login"] for member in members]


          def check_src_branch(src_branch: str) -> None:
              feature, username, issue_ids = src_branch.split("/")

              if not feature == "feature":
                  print(f"src_branch: {src_branch}")
                  print(f"Defined: feature")
                  print(f"Current: {feature}")
                  sys.exit(1)

              usernames = get_usernames()
              if not username in usernames:
                  print(f"src_branch: {src_branch}")
                  print(f"Defined: {usernames}")
                  print(f"Current: {username}")
                  sys.exit(1)

              for issue_id in issue_ids.split("-"):
                  if not issue_id[0] == "#":
                      print(f"src_branch: {src_branch}")
                      print(f"Defined: #")
                      print(f"Current: {issue_id[0]}")
                      sys.exit(1)
                  if not issue_id.replace("#", "").isnumeric():
                      print(f"src_branch: {src_branch}")
                      print(f"Defined: #[numeric]")
                      print(f"Current: {issue_id}")
                      sys.exit(1)


          def check_dst_branch(dst_branch: str) -> None:
              if not dst_branch == "main":
                  print(f"dst_branch: {dst_branch}")
                  print("Defined: main")
                  print(f"Current: {dst_branch}")
                  sys.exit(1)


          def update_pr_tiele_and_description(src_branch: str) -> None:
              _, _, issue_ids = src_branch.split("/")
              issue_ids = issue_ids.replace("#", "")

              body = "## Link to Issue\n"
              for issue_id in issue_ids.split("-"):
                  body += f"- https://github.com/${{ github.repository }}/issues/{issue_id}\n"

              patch_request(
                  url="https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }}",
                  data=json.dumps({"title": src_branch, "body": body}),
              )


          def main() -> None:
              src_branch = "${{ github.head_ref }}"
              dst_branch = "${{ github.base_ref }}"
              check_src_branch(src_branch)
              check_dst_branch(dst_branch)
              update_pr_tiele_and_description(src_branch)


          if __name__ == "__main__":
              main()
